This tutorial adapted from the Processing interactivity tutorial:
https://processing.org/tutorials/interactivity/

The screen forms a bridge between our bodies and the realm of circuits and electricity inside computers. We control elements on screen through a variety of devices, but the keyboard and mouse remain the most common input devices for desktop computers. The design of the mouse has gone through many revisions in the last forty years, but its function has remained the same: to control the position of the cursor on screen and to select interface elements. 

The cursor position is read by computer programs as two numbers, the x-coordinate and the y-coordinate. These numbers can be used to control attributes of elements on screen. If these coordinates are collected and analyzed, they can be used to extract higher-level information such as the speed and direction of the mouse. This data can in turn be used for gesture and pattern recognition. 

Keyboards are typically used to input characters for composing documents and messages, but the keyboard has potential for use beyond its original intent. When writing your own software, you have the freedom to use the keyboard data any way you wish. For example, basic information such as the speed and rhythm of the fingers can be determined by the rate at which keys are pressed. This information could control the speed of an event or the quality of motion. It’s also possible to ignore the characters printed on the keyboard itself and use the location of each key relative to the keyboard grid as a numeric position. 

Mouse Data

In p5, the built-in variables mouseX and mouseY (note the capital X and Y) store the x-coordinate and y-coordinate of the cursor relative to the origin in the upper-left corner of your Canvas. To see the actual values produced while moving the mouse, run this program to print the values to the console: 

[ CODE FOR SKETCH 0 - PRINTING mouseX and mouseY to the console]

When a program starts, the mouseX and mouseY values are 0. If the cursor moves into the display window, the values are set to the current position of the cursor. If the cursor is at the left, the mouseX value is 0 and the value increases as the cursor moves to the right. If the cursor is at the top, the mouseY value is 0 and the value increases as the cursor moves down. If mouseX and mouseY are used in programs without a draw() or if noLoop() is run in setup(), the values will always be 0. 

The mouse position is often used to control the location of visual elements on screen. You can create some interesting relationships when the visual elements relate differently to the mouse values, rather than simply mimicking the current position. Adding and subtracting values from the mouse position creates relationships that remain constant, while multiplying and dividing these values creates changing visual relationships between the mouse position and the elements on the screen. In the first of the following examples, the circle is directly mapped to the cursor, in the second, numbers are added and subtracted from the cursor position to create offsets, and in the third, multiplication and division are used to scale the offsets.

[CODE FOR SKETCH 1 - Circle with mouseX mouseY]

[CODE FOR SKETCH 2 - Circle with mouseX mouseY + addition/subtraction]

[CODE FOR SKETCH 3 - Circle with mouseX mouseY + multiplication/division]


To invert the value of the mouse, subtract the mouseX value from the width of the window and subtract the mouseY value from the height of the screen.

[CODE FOR SKETCH 4 - Inverting the Mouse]

The p5 variables pmouseX and pmouseY store the mouse values from the previous frame. If the mouse does not move, the values will be the same, but if the mouse is moving quickly there can be large differences between the values. To see the difference, run the following program and alternate moving the mouse slowly and quickly. Watch the values print to the console.  
[CODE FOR SKETCH 5 - Printing pmouseX]

Draw a line from the previous mouse position to the current position to show the changing position in one frame and reveal the speed and direction of the mouse. When the mouse is not moving, a point is drawn, but quick mouse movements create long lines.

[CODE FOR SKETCH 6 - Drawing a line]


Use the mouseX and mouseY variables with an if structure to allow the cursor to select regions of the screen. The following examples demonstrate the cursor making a selection between different areas of the display window. The first divides the screen into halves, and the second divides the screen into thirds.

[CODE FOR SKETCH 7 - Selecting parts of the screen // HALVES]

[CODE FOR SKETCH 8- Selecting parts of the screen // THIRDS]


This code is similar but works by tracking both the X and Y position of the cursor (as opposed to just the X position in the previous example). This code asks, “Is the cursor to the right of the left edge of the Canvas and is the cursor to the left of the right edge and is the cursor beyond the top edge and is the cursor above the bottom?” The code for the next example asks a set of similar questions and combines them with the keyword else to determine which one of the defined areas contains the cursor.

[CODE FOR SKETCH 9 - Selecting parts of the screen // QUADRANTS]


To prepare for the next section (Mouse Buttons), let’s try selecting a rectangular region of the screen, use the logical operator && with an if structure . As demonstrated in the following example, when a relational expression is made to test each edge of a rectangle (left, right, top, bottom) and these are concatenated with a logical AND, the entire relational expression is true only when the cursor is inside the rectangle.


[CODE FOR SKETCH 10 - Prepping for Button]


Mouse buttons
Computer mice and other related input devices typically have between one and three buttons; p5 can detect when these buttons are pressed with the mouseIsPressed and mouseButton variables. Used with the button status, the cursor position enables the mouse to perform different actions. For example, a button press when the mouse is over an icon can select it, so the icon can be moved to a different location on screen. The mouseIsPressed variable is true if any mouse button is pressed and false if no mouse button is pressed. The variable mouseButton is LEFT, CENTER, or RIGHT depending on the mouse button most recently pressed. The mouseIsPressed variable reverts to false as soon as the button is released, but the mouseButton variable retains its value until a different button is pressed. These variables can be used independently or in combination to control the software. Run these programs to see how the software responds to your fingers.

[CODE FOR SKETCH 11 - mouseIsPressed]

[CODE FOR SKETCH 12 - mouseButton]

[CODE FOR SKETCH 13 - mouseButton + mouseIsPressed]


Keyboard data
P5 registers the most recently pressed key and whether a key is currently pressed. The boolean variable keyIsPressed is true if a key is pressed and is false if not. Include this variable in the test of an if structure to allow lines of code to run only if a key is pressed. The keyIsPressed variable remains true while the key is held down and becomes false only when the key is released.

[CODE FOR SKETCH 14 - keyIsPressed]

[CODE FOR SKETCH 15 - Increment while keyIsPressed]


The key variable stores a single alphanumeric character. Specifically, it holds the most recently pressed key. The key can be displayed on screen with the text() function.

[CODE FOR SKETCH 16 - Drawing key to the screen]


The key variable may be used to determine whether a specific key is pressed. The following example uses the expression key=='A' to test if the A key is pressed. The single quotes signify A as the data type char. The expression key=="A" will cause an error because the double quotes signify the A as a String, and it’s not possible to compare a String with a char. The logical AND symbol, the && operator, is used to connect the expression with the keyPressed variable to ascertain that the key pressed is the uppercase A.

[CODE FOR SKETCH 17 - Using specific keys to control what’s on screen]

The previous example works with an uppercase A, but not if the lowercase letter is pressed. To check for both uppercase and lowercase letters, extend the relational expression with a logical OR, the || relational operator. Line 9 in the previous program would be changed to  
if ((keyIsPressed == true) && ((key == 'a') || (key == 'A'))) {

Because each character has a numeric value as defined by the ASCII table, the value of the key variable can be used like any other number to control visual attributes such as the position and color of shape elements. For instance, the ASCII table defines the uppercase A as the number 65, and the digit 1 is defined as 49.

[CODE FOR SKETCH 18 - Using ASCII values of keys] —> ASK ABOUT THIS, WORKS WITH KEYCODE BUT NOT KEY

[CODE FOR SKETCH 19 - Using key value to determine angle] —> ASK ABOUT THIS, WORKS WITH KEYCODE BUT NOT KEY

[CODE FOR SKETCH 20 - Controlling angles with keys]


Coded keys
In addition to reading key values for numbers, letters, and symbols, p5 can also read the values from other keys including the arrow keys and the Alt, Control, Shift, Backspace, Tab, Enter, Return, Escape, and Delete keys. The variable keyCode stores the ALT, CONTROL, SHIFT, UP, DOWN, LEFT, and RIGHT keys as constants. Before determining which coded key is pressed, it’s necessary to check first to see if the key is coded. The expression key==CODED is true if the key is coded and false otherwise. Even though not alphanumeric, the keys included in the ASCII specification (BACKSPACE, TAB, ENTER, RETURN, ESC, and DELETE) will not be identified as a coded key. If you’re making cross-platform projects, note that the Enter key is commonly used on PCs and UNIX and the Return key is used on Macintosh. Check for both Enter and Return to make sure your program will work for all platforms.

[CODE FOR SKETCH 21 - More with key codes]


Events
A category of functions called events alter the normal flow of a program when an action such as a key press or mouse movement takes place. An event is a polite interruption of the normal flow of a program. The code inside an event function is run once each time the corresponding event occurs. For example, if a mouse button is pressed, the code inside the mousePressed() function will run once and will not run again until the button is pressed again. This allows data produced by the mouse and keyboard to be read independently from what is happening in the rest of the program.

Mouse events
The mouse event functions are mousePressed(), mouseReleased(), mouseMoved(), mouseDragged(), mouseClicked() and mouseWheel(): 

mousePressed(): Code inside this block runs one time when a mouse button is pressed.
mouseReleased(): Code inside this block runs one time when a mouse button is released.
mouseMoved(): Code inside this block runs one time when the mouse is moved.
mouseDragged(): Code inside this block runs one time when the mouse is moved while a mouse button is pressed.
mouseClicked(): Code inside this block runs once after a mouse button has been pressed and then released.
mouseWheel(): Code inside this block runs once after a scroll event is detected, either triggered by an actual mouse wheel or by a trackpad.

The mousePressed() function works differently than the mousePressed variable. The value of the mousePressed variable is true until the mouse button is released. It can therefore be used within draw() to have a line of code run while the mouse is pressed. In contrast, the code inside the mousePressed() function only runs once when a button is pressed. This makes it useful when a mouse click is used to trigger an action, such as clearing the screen. In the following example, the background value becomes lighter each time a mouse button is pressed. 

[CODE FOR SKETCH 22 - mousePressed function]


The following example is the same as the one above, but the gray variable is set in the mouseReleased() event function, which is called once every time a button is released. This difference can be seen only by running the program and clicking the mouse button. Keep the mouse button pressed for a long time and notice that the background value changes only when the button is released.

[CODE FOR SKETCH 23 - mouseReleased function]

It is generally not a good idea to draw inside an event function, but it can be done under certain conditions. Before drawing inside these functions, it’s important to think about the flow of the program. In this example, squares are drawn inside mousePressed() and they remain on screen because there is no background() inside draw(). But if background() is used, visual elements drawn within one of the mouse event functions will appear on screen for only a single frame, or, by default, 1/60th of a second. In fact, you’ll notice this example has nothing at all inside draw(), but it needs to be there to force p5 to keep listening for the events. If a background() function were run inside draw(), the rectangles would flash onto the screen and disappear.

[CODE FOR SKETCH 24 - Using the draw loop]


The code inside the mouseMoved() and mouseDragged() event functions are run when there is a change in the mouse position. The code in the mouseMoved() block is run at the end of each frame when the mouse moves and no button is pressed. The code in the mouseDragged() block does the same when the mouse button is pressed. If the mouse stays in the same position from frame to frame, the code inside these functions does not run. In this example, the gray circle follows the mouse when the button is not pressed, and the black circle follows the mouse when a mouse button is pressed.

[CODE FOR SKETCH 25 - MOUSE DRAGGED AND MOVED]



Key events
Each key press is registered through the keyboard event functions keyPressed() and keyReleased(): 

keyPressed(): Code inside this block runs one time when any key is pressed 
keyReleased(): Code inside this block runs one time when any key is released 

Each time a key is pressed, the code inside the keyPressed() block is run once. Within this block, it’s possible to test which key has been pressed and to use this value for any purpose. If a key is held down for an extended time, the code inside the keyPressed() block might run many times in a rapid succession because most operating systems will take over and repeatedly call the keyPressed() function. The amount of time it takes to start repeating and the rate of repetitions will be different from computer to computer, depending on the keyboard preference settings. In this example, the value of the boolean variable drawT is set from false to true when the T key is pressed; this causes the lines of code to render the rectangles in draw() to start running.

[CODE FOR SKETCH 26 - drawing a T]

Each time a key is released, the code inside the keyReleased() block is run once. The following example builds on the previous code; each time the key is released the boolean variable drawT is set back to false to stop the shape from displaying within draw().

[CODE FOR SKETCH 27 - drawing a T using keyReleased()]


Controlling event flow
As discussed previously, programs written with draw() display frames to the screen sixty frames each second. The frameRate() function is used to set a limit on the number of frames that will display each second, and the noLoop() function can be used to stop draw() from looping. The additional functions loop() and redraw() provide more options when used in combination with the mouse and keyboard event functions. If a program has been paused with noLoop(), running loop() resumes its action. Because the event functions are the only elements that continue to run when a program is paused with noLoop(), the loop() function can be used within these events to continue running the code in draw(). The following example runs the draw() function for about two seconds each time a mouse button is pressed and then pauses the program after that time has elapsed. 

[CODE FOR SKETCH 28 - controlling event flow with mousePressed]

The redraw() function runs the code in draw() one time and then halts the execution. It’s helpful when the display needn’t be updated continuously. The following example runs the code in draw() once each time a mouse button is pressed.

[CODE FOR SKETCH 29 - using the redraw function]


Cursor icon
The cursor can be hidden with the noCursor() function and can be set to appear as a different icon or image with the cursor() function. When the noCursor() function is run, the cursor icon disappears as it moves into the display window. To give feedback about the location of the cursor within the software, a custom cursor can be drawn and controlled with the mouseX and mouseY variables. 

[CODE FOR SKETCH 30 - hiding the cursor)


If noCursor() is run, the cursor will be hidden while the program is running until the cursor() function is run to reveal it. 

[CODE FOR SKETCH 31 - revealing the cursor with mousepressed)


Add a parameter to the cursor() function to change it to another icon or image. Either load and use image, or use the self-descriptive options are ARROW, CROSS, HAND, MOVE, TEXT, and WAIT. These cursor icons are part of your computer’s operating system and will appear different on different machines.

[CODE FOR SKETCH 32 - loading a custom cursor)



